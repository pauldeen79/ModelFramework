<#@ template language="c#" #>
<#@ templateName value="CSharpClassGenerator.DefaultClassTemplate" #>
<#@ model type="ITypeBase" #>
<#@ viewModel name="CSharpClassGenerator.DefaultClassViewModel" model="Model" #>
<# if (ViewModel.GenerateMultipleFiles)
   {
       this.GenerationEnvironment = ViewModel.StartNewFile(); #>
<#@ renderChildTemplate name="CSharpClassGenerator.CodeGenerationHeaderTemplate" model="ViewModel.Root" #>
<#@ renderChildTemplate name="CSharpClassGenerator.DefaultUsingsTemplate" model="ViewModel.Root.Model" enumerable="false" customResolverDelegate="ResolveFromMetadata" #>

namespace <#= Model.Namespace #>
{
<# } #>
<# if (ViewModel.EnableNullableContext)
   { #>
#nullable enable
<# } #>
<#@ renderChildTemplate name="CSharpClassGenerator.DefaultAttributeTemplate" model="Model.Attributes" customResolverDelegate="ResolveFromMetadata" #>
    <#= Model.GetModifiers() #><#= Model.GetContainerType() #> <#= Model.Name.Sanitize().GetCsharpFriendlyName() #><#= Model.GetGenericTypeArgumentsString() #><#= Model.GetInheritedClasses() #>
    {
<#@ renderChildTemplate model="ViewModel.SubItems" customResolverDelegate="ResolveFromMetadata" separatorTemplateName="NewLine" footerTemplateName="NewLine" footerCondition="ViewModel.HasSubclasses" customTemplateNameDelegate="GetTemplateName" #>
<#      if (ViewModel.HasSubclasses)
        {
            var childGen = ViewModel.CreateChildGenerator(RootTemplate);
            Write("    "); //fix indentation on first line
            childGen.Render(GenerationEnvironment);
            Write(RootTemplate.CurrentIndent);
        } #>
    }
<# if (ViewModel.EnableNullableContext)
   { #>
#nullable restore
<# } #>
<# if (ViewModel.GenerateMultipleFiles)
   { #>
}
<#     ViewModel.Root.ViewModel.TemplateFileManager.ResetToDefaultOutput(); 
   } #>
