<#@ template language="c#" #>
<#@ templateName value="CSharpClassGenerator.DefaultMethodViewModel" #>
<#@ model type="IClassMethod" #>
<#@ templateContext #>
<#+
    public bool ShouldRenderModifiers => string.IsNullOrEmpty(Model.ExplicitInterfaceName) && !(TemplateContext.GetModelFromContextByType<ITypeBase>() is IInterface);
    public string ReturnTypeName => Model.TypeName.FixTypeName().GetCsharpFriendlyTypeName().WhenNullOrEmpty("void");
    public bool ShouldRenderExplicitInterfaceName => !string.IsNullOrEmpty(Model.ExplicitInterfaceName) && !(TemplateContext.GetModelFromContextByType<ITypeBase>() is IInterface);
    public string Name => Model.Operator
        ? "operator " + Model.Name
        : Model.IsInterfaceMethod()
            ? Model.Name.RemoveInterfacePrefix().Sanitize().GetCsharpFriendlyName()
            : Model.Name.Sanitize().GetCsharpFriendlyName();
    public bool OmitCode => TemplateContext.GetModelFromContextByType<ITypeBase>() is IInterface;
    public bool ShouldRenderCodeStatements => Model.CodeStatements.Any();
#>