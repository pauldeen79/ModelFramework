<#@ template language="C#" className="ModelFramework.Generators.Objects.CSharpClassGenerator" #>
<#@ include File="$(BasePath)ModelFramework.Generators.Shared\Templates\ModelFrameworkGenerator.ttinclude" #>
<#@ includes Path="$(BasePath)ModelFramework.Generators.Objects\Templates\Includes" SearchPattern="*.ttinclude" Recurse="true" #>
<#@ output extension="cs" #>
<#@ assembly name="ModelFramework.Objects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" #>
<#@ registerChildTemplates path="$(BasePath)ModelFramework.Generators.Objects\Templates\ChildTemplates" searchPattern="*.template" recurse="true" #>
<#@ registerViewModels path="$(BasePath)ModelFramework.Generators.Objects\Templates" searchPattern="*.viewmodel" recurse="true" #>
<#@ import namespace="ModelFramework.Objects.Contracts" #>
<#@ import namespace="ModelFramework.Objects.Extensions" #>
<#@ import namespace="ModelFramework.Objects.Settings" #>
<#@ model type="System.Collections.Generic.IEnumerable`1" genericTypeParameter="ModelFramework.Objects.Contracts.ITypeBase" #>
<#@ property name="GenerateMultipleFiles" type="System.Boolean" #>
<#@ property name="EnvironmentVersion" type="System.String" browsable="false" #>
<#@ property name="BasePath" type="System.String" #>
<#@ property name="FileNameSuffix" type="System.String" #>
<#@ property name="EnableNullableContext" type="System.Boolean" #>
<#@ viewModel name="CSharpClassGenerator.ViewModel" model="Model" #>
<#          if (TemplateContext.IsRootContext)
            {
                ViewModel.TemplateFileManager = new TemplateFileManager(b => this.GenerationEnvironment = b, () => this.GenerationEnvironment, BasePath);
                if (!GenerateMultipleFiles)
                { #>
<#@ renderChildTemplate name="CSharpClassGenerator.CodeGenerationHeaderTemplate" model="this" #>
<#@ renderChildTemplate name="CSharpClassGenerator.DefaultUsingsTemplate" model="Model" enumerable="false" customResolverDelegate="ResolveFromMetadata" #><#
                }
            }
            else if (!GenerateMultipleFiles)
            { #>
<#@ renderChildTemplate name="CSharpClassGenerator.CodeGenerationHeaderTemplate" model="this" #>
<#          }
            foreach (var ns in ViewModel.Namespaces)
            {
                if (TemplateContext.IsRootContext && !GenerateMultipleFiles)
                { #>

namespace <#= ns #>
{
<#              } #>
<#@ renderChildTemplate name="CSharpClassGenerator.DefaultClassTemplate" model="ViewModel.GetClassesByNamespace(ns)" customResolverDelegate="ResolveFromMetadata" separatorTemplateName="NewLine" #>
<#              if (TemplateContext.IsRootContext && !GenerateMultipleFiles)
                { #>
}
<#              }
            }

            if (TemplateContext.IsRootContext)
            {
                ViewModel.TemplateFileManager.Process(GenerateMultipleFiles);
            }
#>