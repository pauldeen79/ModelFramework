// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 7.0.12
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ModelFramework.Objects.Models
{
#nullable enable
    public partial class ClassMethodModel
    {
        public bool Partial
        {
            get;
            set;
        }

        public bool ExtensionMethod
        {
            get;
            set;
        }

        public bool Operator
        {
            get;
            set;
        }

        public bool Async
        {
            get;
            set;
        }

        public System.Collections.Generic.List<string> GenericTypeArguments
        {
            get;
            set;
        }

        public System.Collections.Generic.List<string> GenericTypeArgumentConstraints
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Models.MetadataModel> Metadata
        {
            get;
            set;
        }

        public bool Static
        {
            get;
            set;
        }

        public bool Virtual
        {
            get;
            set;
        }

        public bool Abstract
        {
            get;
            set;
        }

        public bool Protected
        {
            get;
            set;
        }

        public bool Override
        {
            get;
            set;
        }

        public ModelFramework.Objects.Contracts.Visibility Visibility
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Objects.Models.AttributeModel> Attributes
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Objects.Contracts.ICodeStatementModel> CodeStatements
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Objects.Models.ParameterModel> Parameters
        {
            get;
            set;
        }

        public string TypeName
        {
            get;
            set;
        }

        public bool IsNullable
        {
            get;
            set;
        }

        public bool IsValueType
        {
            get;
            set;
        }

        public string ExplicitInterfaceName
        {
            get;
            set;
        }

        public string ParentTypeFullName
        {
            get;
            set;
        }

        public ModelFramework.Objects.Contracts.IClassMethod ToEntity()
        {
            #pragma warning disable CS8604 // Possible null reference argument.
            #pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
            return new ModelFramework.Objects.ClassMethod(Partial, ExtensionMethod, Operator, Async, new System.Collections.Generic.List<System.String>(GenericTypeArguments), new System.Collections.Generic.List<System.String>(GenericTypeArgumentConstraints), Metadata.Select(x => x.ToEntity()), Static, Virtual, Abstract, Protected, Override, Visibility, Name, Attributes.Select(x => x.ToEntity()), CodeStatements.Select(x => x.ToEntity()), Parameters.Select(x => x.ToEntity()), TypeName, IsNullable, IsValueType, ExplicitInterfaceName, ParentTypeFullName);
            #pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
            #pragma warning restore CS8604 // Possible null reference argument.
        }

        public ClassMethodModel()
        {
            GenericTypeArguments = new System.Collections.Generic.List<string>();
            GenericTypeArgumentConstraints = new System.Collections.Generic.List<string>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Models.MetadataModel>();
            Attributes = new System.Collections.Generic.List<ModelFramework.Objects.Models.AttributeModel>();
            CodeStatements = new System.Collections.Generic.List<ModelFramework.Objects.Contracts.ICodeStatementModel>();
            Parameters = new System.Collections.Generic.List<ModelFramework.Objects.Models.ParameterModel>();
            Name = string.Empty;
            TypeName = string.Empty;
            ExplicitInterfaceName = string.Empty;
            ParentTypeFullName = string.Empty;
        }

        public ClassMethodModel(ModelFramework.Objects.Contracts.IClassMethod source)
        {
            GenericTypeArguments = new System.Collections.Generic.List<string>();
            GenericTypeArgumentConstraints = new System.Collections.Generic.List<string>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Models.MetadataModel>();
            Attributes = new System.Collections.Generic.List<ModelFramework.Objects.Models.AttributeModel>();
            CodeStatements = new System.Collections.Generic.List<ModelFramework.Objects.Contracts.ICodeStatementModel>();
            Parameters = new System.Collections.Generic.List<ModelFramework.Objects.Models.ParameterModel>();
            Partial = source.Partial;
            ExtensionMethod = source.ExtensionMethod;
            Operator = source.Operator;
            Async = source.Async;
            GenericTypeArguments.AddRange(source.GenericTypeArguments);
            GenericTypeArgumentConstraints.AddRange(source.GenericTypeArgumentConstraints);
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Models.MetadataModel(x)));
            Static = source.Static;
            Virtual = source.Virtual;
            Abstract = source.Abstract;
            Protected = source.Protected;
            Override = source.Override;
            Visibility = source.Visibility;
            Name = source.Name;
            Attributes.AddRange(source.Attributes.Select(x => new ModelFramework.Objects.Models.AttributeModel(x)));
            CodeStatements.AddRange(source.CodeStatements.Select(x => x.CreateModel()));
            Parameters.AddRange(source.Parameters.Select(x => new ModelFramework.Objects.Models.ParameterModel(x)));
            TypeName = source.TypeName;
            IsNullable = source.IsNullable;
            IsValueType = source.IsValueType;
            ExplicitInterfaceName = source.ExplicitInterfaceName;
            ParentTypeFullName = source.ParentTypeFullName;
        }
    }
#nullable restore
}

