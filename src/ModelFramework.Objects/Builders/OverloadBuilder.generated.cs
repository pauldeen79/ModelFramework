// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 7.0.12
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ModelFramework.Objects.Builders
{
#nullable enable
    public partial class OverloadBuilder
    {
        public string MethodName
        {
            get;
            set;
        }

        public string InitializeExpression
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Objects.Builders.ParameterBuilder> Parameters
        {
            get;
            set;
        }

        public ModelFramework.Objects.Contracts.IOverload Build()
        {
            #pragma warning disable CS8604 // Possible null reference argument.
            #pragma warning disable CS8600 // Converting null literal or possible null value to non-nullable type.
            return new ModelFramework.Objects.Overload(MethodName, InitializeExpression, Parameters.Select(x => x.Build()));
            #pragma warning restore CS8600 // Converting null literal or possible null value to non-nullable type.
            #pragma warning restore CS8604 // Possible null reference argument.
        }

        public OverloadBuilder WithMethodName(string methodName)
        {
            MethodName = methodName;
            return this;
        }

        public OverloadBuilder WithInitializeExpression(string initializeExpression)
        {
            InitializeExpression = initializeExpression;
            return this;
        }

        public OverloadBuilder AddParameters(System.Collections.Generic.IEnumerable<ModelFramework.Objects.Builders.ParameterBuilder> parameters)
        {
            return AddParameters(parameters.ToArray());
        }

        public OverloadBuilder AddParameters(params ModelFramework.Objects.Builders.ParameterBuilder[] parameters)
        {
            Parameters.AddRange(parameters);
            return this;
        }

        public OverloadBuilder AddParameter(string name, System.Type type)
        {
            AddParameters(new ModelFramework.Objects.Builders.ParameterBuilder().WithName(name).WithType(type));
            return this;
        }

        public OverloadBuilder AddParameter(string name, System.Type type, bool isNullable)
        {
            AddParameters(new ModelFramework.Objects.Builders.ParameterBuilder().WithName(name).WithType(type).WithIsNullable(isNullable));
            return this;
        }

        public OverloadBuilder AddParameter(string name, string typeName)
        {
            AddParameters(new ModelFramework.Objects.Builders.ParameterBuilder().WithName(name).WithTypeName(typeName));
            return this;
        }

        public OverloadBuilder AddParameter(string name, string typeName, bool isNullable)
        {
            AddParameters(new ModelFramework.Objects.Builders.ParameterBuilder().WithName(name).WithTypeName(typeName).WithIsNullable(isNullable));
            return this;
        }

        public OverloadBuilder()
        {
            Parameters = new System.Collections.Generic.List<ModelFramework.Objects.Builders.ParameterBuilder>();
            MethodName = string.Empty;
            InitializeExpression = string.Empty;
        }

        public OverloadBuilder(ModelFramework.Objects.Contracts.IOverload source)
        {
            Parameters = new System.Collections.Generic.List<ModelFramework.Objects.Builders.ParameterBuilder>();
            MethodName = source.MethodName;
            InitializeExpression = source.InitializeExpression;
            Parameters.AddRange(source.Parameters.Select(x => new ModelFramework.Objects.Builders.ParameterBuilder(x)));
        }
    }
#nullable restore
}

