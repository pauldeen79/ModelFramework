// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 6.0.7
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ModelFramework.Objects.Builders
{
#nullable enable
    public abstract partial class TypeBaseBuilder<TBuilder, TEntity>
        where TEntity : ModelFramework.Objects.Contracts.ITypeBase
        where TBuilder : TypeBaseBuilder<TBuilder, TEntity>
    {
        public string Namespace
        {
            get
            {
                return _namespaceDelegate.Value;
            }
            set
            {
                _namespaceDelegate = new (() => value);
            }
        }

        public bool Partial
        {
            get
            {
                return _partialDelegate.Value;
            }
            set
            {
                _partialDelegate = new (() => value);
            }
        }

        public System.Collections.Generic.List<string> Interfaces
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Objects.Builders.ClassPropertyBuilder> Properties
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Objects.Builders.ClassMethodBuilder> Methods
        {
            get;
            set;
        }

        public System.Collections.Generic.List<string> GenericTypeArguments
        {
            get;
            set;
        }

        public System.Collections.Generic.List<string> GenericTypeArgumentConstraints
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Objects.Contracts.Visibility Visibility
        {
            get
            {
                return _visibilityDelegate.Value;
            }
            set
            {
                _visibilityDelegate = new (() => value);
            }
        }

        public string Name
        {
            get
            {
                return _nameDelegate.Value;
            }
            set
            {
                _nameDelegate = new (() => value);
            }
        }

        public System.Collections.Generic.List<ModelFramework.Objects.Builders.AttributeBuilder> Attributes
        {
            get;
            set;
        }

        public TBuilder AddAttributes(params ModelFramework.Objects.Builders.AttributeBuilder[] attributes)
        {
            Attributes.AddRange(attributes);
            return (TBuilder)this;
        }

        public TBuilder AddAttributes(System.Collections.Generic.IEnumerable<ModelFramework.Objects.Builders.AttributeBuilder> attributes)
        {
            return AddAttributes(attributes.ToArray());
        }

        public TBuilder AddGenericTypeArgumentConstraints(System.Collections.Generic.IEnumerable<string> genericTypeArgumentConstraints)
        {
            return AddGenericTypeArgumentConstraints(genericTypeArgumentConstraints.ToArray());
        }

        public TBuilder AddGenericTypeArgumentConstraints(params string[] genericTypeArgumentConstraints)
        {
            GenericTypeArgumentConstraints.AddRange(genericTypeArgumentConstraints);
            return (TBuilder)this;
        }

        public TBuilder AddGenericTypeArguments(System.Collections.Generic.IEnumerable<string> genericTypeArguments)
        {
            return AddGenericTypeArguments(genericTypeArguments.ToArray());
        }

        public TBuilder AddGenericTypeArguments(params string[] genericTypeArguments)
        {
            GenericTypeArguments.AddRange(genericTypeArguments);
            return (TBuilder)this;
        }

        public TBuilder AddInterfaces(System.Collections.Generic.IEnumerable<string> interfaces)
        {
            return AddInterfaces(interfaces.ToArray());
        }

        public TBuilder AddInterfaces(params string[] interfaces)
        {
            Interfaces.AddRange(interfaces);
            return (TBuilder)this;
        }

        public TBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return (TBuilder)this;
        }

        public TBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public TBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return (TBuilder)this;
        }

        public TBuilder AddMethods(params ModelFramework.Objects.Builders.ClassMethodBuilder[] methods)
        {
            Methods.AddRange(methods);
            return (TBuilder)this;
        }

        public TBuilder AddMethods(System.Collections.Generic.IEnumerable<ModelFramework.Objects.Builders.ClassMethodBuilder> methods)
        {
            return AddMethods(methods.ToArray());
        }

        public TBuilder AddProperties(params ModelFramework.Objects.Builders.ClassPropertyBuilder[] properties)
        {
            Properties.AddRange(properties);
            return (TBuilder)this;
        }

        public TBuilder AddProperties(System.Collections.Generic.IEnumerable<ModelFramework.Objects.Builders.ClassPropertyBuilder> properties)
        {
            return AddProperties(properties.ToArray());
        }

        public abstract TEntity Build();

        public TBuilder WithName(System.Func<string> nameDelegate)
        {
            _nameDelegate = new (nameDelegate);
            return (TBuilder)this;
        }

        public TBuilder WithName(string name)
        {
            Name = name;
            return (TBuilder)this;
        }

        public TBuilder WithNamespace(System.Func<string> namespaceDelegate)
        {
            _namespaceDelegate = new (@namespaceDelegate);
            return (TBuilder)this;
        }

        public TBuilder WithNamespace(string @namespace)
        {
            Namespace = @namespace;
            return (TBuilder)this;
        }

        public TBuilder WithPartial(bool partial = true)
        {
            Partial = partial;
            return (TBuilder)this;
        }

        public TBuilder WithPartial(System.Func<bool> partialDelegate)
        {
            _partialDelegate = new (partialDelegate);
            return (TBuilder)this;
        }

        public TBuilder WithVisibility(ModelFramework.Objects.Contracts.Visibility visibility)
        {
            Visibility = visibility;
            return (TBuilder)this;
        }

        public TBuilder WithVisibility(System.Func<ModelFramework.Objects.Contracts.Visibility> visibilityDelegate)
        {
            _visibilityDelegate = new (visibilityDelegate);
            return (TBuilder)this;
        }

        protected TypeBaseBuilder()
        {
            Interfaces = new System.Collections.Generic.List<string>();
            Properties = new System.Collections.Generic.List<ModelFramework.Objects.Builders.ClassPropertyBuilder>();
            Methods = new System.Collections.Generic.List<ModelFramework.Objects.Builders.ClassMethodBuilder>();
            GenericTypeArguments = new System.Collections.Generic.List<string>();
            GenericTypeArgumentConstraints = new System.Collections.Generic.List<string>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Attributes = new System.Collections.Generic.List<ModelFramework.Objects.Builders.AttributeBuilder>();
            #pragma warning disable CS8603 // Possible null reference return.
            _namespaceDelegate = new (() => string.Empty);
            _partialDelegate = new (() => default);
            _visibilityDelegate = new (() => ModelFramework.Objects.Contracts.Visibility.Public);
            _nameDelegate = new (() => string.Empty);
            #pragma warning restore CS8603 // Possible null reference return.
        }

        protected TypeBaseBuilder(ModelFramework.Objects.Contracts.ITypeBase source)
        {
            Interfaces = new System.Collections.Generic.List<string>();
            Properties = new System.Collections.Generic.List<ModelFramework.Objects.Builders.ClassPropertyBuilder>();
            Methods = new System.Collections.Generic.List<ModelFramework.Objects.Builders.ClassMethodBuilder>();
            GenericTypeArguments = new System.Collections.Generic.List<string>();
            GenericTypeArgumentConstraints = new System.Collections.Generic.List<string>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Attributes = new System.Collections.Generic.List<ModelFramework.Objects.Builders.AttributeBuilder>();
            _namespaceDelegate = new (() => source.Namespace);
            _partialDelegate = new (() => source.Partial);
            Interfaces.AddRange(source.Interfaces);
            Properties.AddRange(source.Properties.Select(x => new ModelFramework.Objects.Builders.ClassPropertyBuilder(x)));
            Methods.AddRange(source.Methods.Select(x => new ModelFramework.Objects.Builders.ClassMethodBuilder(x)));
            GenericTypeArguments.AddRange(source.GenericTypeArguments);
            GenericTypeArgumentConstraints.AddRange(source.GenericTypeArgumentConstraints);
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
            _visibilityDelegate = new (() => source.Visibility);
            _nameDelegate = new (() => source.Name);
            Attributes.AddRange(source.Attributes.Select(x => new ModelFramework.Objects.Builders.AttributeBuilder(x)));
        }

        private System.Lazy<string> _namespaceDelegate;

        private System.Lazy<bool> _partialDelegate;

        private System.Lazy<ModelFramework.Objects.Contracts.Visibility> _visibilityDelegate;

        private System.Lazy<string> _nameDelegate;
    }
#nullable restore
}

