// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 6.0.9
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ModelFramework.Database.Builders
{
#nullable enable
    public partial class ViewBuilder
    {
        public System.Collections.Generic.List<ModelFramework.Database.Builders.ViewFieldBuilder> SelectFields
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.ViewOrderByFieldBuilder> OrderByFields
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.ViewFieldBuilder> GroupByFields
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.ViewSourceBuilder> Sources
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.ViewConditionBuilder> Conditions
        {
            get;
            set;
        }

        public System.Nullable<int> Top
        {
            get
            {
                return _topDelegate.Value;
            }
            set
            {
                _topDelegate = new (() => value);
            }
        }

        public bool TopPercent
        {
            get
            {
                return _topPercentDelegate.Value;
            }
            set
            {
                _topPercentDelegate = new (() => value);
            }
        }

        public bool Distinct
        {
            get
            {
                return _distinctDelegate.Value;
            }
            set
            {
                _distinctDelegate = new (() => value);
            }
        }

        public System.Text.StringBuilder Definition
        {
            get
            {
                return _definitionDelegate.Value;
            }
            set
            {
                _definitionDelegate = new (() => value);
            }
        }

        public System.Text.StringBuilder Name
        {
            get
            {
                return _nameDelegate.Value;
            }
            set
            {
                _nameDelegate = new (() => value);
            }
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IView Build()
        {
            #pragma warning disable CS8604 // Possible null reference argument.
            return new ModelFramework.Database.View(SelectFields.Select(x => x.Build()), OrderByFields.Select(x => x.Build()), GroupByFields.Select(x => x.Build()), Sources.Select(x => x.Build()), Conditions.Select(x => x.Build()), Top, TopPercent, Distinct, Definition?.ToString(), Name?.ToString(), Metadata.Select(x => x.Build()));
            #pragma warning restore CS8604 // Possible null reference argument.
        }

        public ViewBuilder AddSelectFields(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ViewFieldBuilder> selectFields)
        {
            return AddSelectFields(selectFields.ToArray());
        }

        public ViewBuilder AddSelectFields(params ModelFramework.Database.Builders.ViewFieldBuilder[] selectFields)
        {
            SelectFields.AddRange(selectFields);
            return this;
        }

        public ViewBuilder AddOrderByFields(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ViewOrderByFieldBuilder> orderByFields)
        {
            return AddOrderByFields(orderByFields.ToArray());
        }

        public ViewBuilder AddOrderByFields(params ModelFramework.Database.Builders.ViewOrderByFieldBuilder[] orderByFields)
        {
            OrderByFields.AddRange(orderByFields);
            return this;
        }

        public ViewBuilder AddGroupByFields(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ViewFieldBuilder> groupByFields)
        {
            return AddGroupByFields(groupByFields.ToArray());
        }

        public ViewBuilder AddGroupByFields(params ModelFramework.Database.Builders.ViewFieldBuilder[] groupByFields)
        {
            GroupByFields.AddRange(groupByFields);
            return this;
        }

        public ViewBuilder AddSources(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ViewSourceBuilder> sources)
        {
            return AddSources(sources.ToArray());
        }

        public ViewBuilder AddSources(params ModelFramework.Database.Builders.ViewSourceBuilder[] sources)
        {
            Sources.AddRange(sources);
            return this;
        }

        public ViewBuilder AddConditions(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ViewConditionBuilder> conditions)
        {
            return AddConditions(conditions.ToArray());
        }

        public ViewBuilder AddConditions(params ModelFramework.Database.Builders.ViewConditionBuilder[] conditions)
        {
            Conditions.AddRange(conditions);
            return this;
        }

        public ViewBuilder WithTop(System.Nullable<int> top)
        {
            Top = top;
            return this;
        }

        public ViewBuilder WithTop(System.Func<System.Nullable<int>> topDelegate)
        {
            _topDelegate = new (topDelegate);
            return this;
        }

        public ViewBuilder WithTopPercent(bool topPercent = true)
        {
            TopPercent = topPercent;
            return this;
        }

        public ViewBuilder WithTopPercent(System.Func<bool> topPercentDelegate)
        {
            _topPercentDelegate = new (topPercentDelegate);
            return this;
        }

        public ViewBuilder WithDistinct(bool distinct = true)
        {
            Distinct = distinct;
            return this;
        }

        public ViewBuilder WithDistinct(System.Func<bool> distinctDelegate)
        {
            _distinctDelegate = new (distinctDelegate);
            return this;
        }

        public ViewBuilder WithDefinition(System.Text.StringBuilder definition)
        {
            Definition = definition;
            return this;
        }

        public ViewBuilder WithDefinition(System.Func<System.Text.StringBuilder> definitionDelegate)
        {
            _definitionDelegate = new (definitionDelegate);
            return this;
        }

        public ViewBuilder WithDefinition(string value)
        {
            Definition.Clear().Append(value);
            return this;
        }

        public ViewBuilder AppendToDefinition(string value)
        {
            Definition.Append(value);
            return this;
        }

        public ViewBuilder AppendLineToDefinition(string value)
        {
            Definition.AppendLine(value);
            return this;
        }

        public ViewBuilder WithName(System.Text.StringBuilder name)
        {
            Name = name;
            return this;
        }

        public ViewBuilder WithName(System.Func<System.Text.StringBuilder> nameDelegate)
        {
            _nameDelegate = new (nameDelegate);
            return this;
        }

        public ViewBuilder WithName(string value)
        {
            Name.Clear().Append(value);
            return this;
        }

        public ViewBuilder AppendToName(string value)
        {
            Name.Append(value);
            return this;
        }

        public ViewBuilder AppendLineToName(string value)
        {
            Name.AppendLine(value);
            return this;
        }

        public ViewBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public ViewBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public ViewBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public ViewBuilder()
        {
            SelectFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewFieldBuilder>();
            OrderByFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewOrderByFieldBuilder>();
            GroupByFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewFieldBuilder>();
            Sources = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewSourceBuilder>();
            Conditions = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewConditionBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            #pragma warning disable CS8603 // Possible null reference return.
            _topDelegate = new (() => default);
            _topPercentDelegate = new (() => default);
            _distinctDelegate = new (() => default);
            _definitionDelegate = new (() => new System.Text.StringBuilder());
            _nameDelegate = new (() => new System.Text.StringBuilder());
            #pragma warning restore CS8603 // Possible null reference return.
        }

        public ViewBuilder(ModelFramework.Database.Contracts.IView source)
        {
            SelectFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewFieldBuilder>();
            OrderByFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewOrderByFieldBuilder>();
            GroupByFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewFieldBuilder>();
            Sources = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewSourceBuilder>();
            Conditions = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewConditionBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            SelectFields.AddRange(source.SelectFields.Select(x => new ModelFramework.Database.Builders.ViewFieldBuilder(x)));
            OrderByFields.AddRange(source.OrderByFields.Select(x => new ModelFramework.Database.Builders.ViewOrderByFieldBuilder(x)));
            GroupByFields.AddRange(source.GroupByFields.Select(x => new ModelFramework.Database.Builders.ViewFieldBuilder(x)));
            Sources.AddRange(source.Sources.Select(x => new ModelFramework.Database.Builders.ViewSourceBuilder(x)));
            Conditions.AddRange(source.Conditions.Select(x => new ModelFramework.Database.Builders.ViewConditionBuilder(x)));
            _topDelegate = new (() => source.Top);
            _topPercentDelegate = new (() => source.TopPercent);
            _distinctDelegate = new (() => source.Distinct);
            _definitionDelegate = new (() => new System.Text.StringBuilder(source.Definition));
            _nameDelegate = new (() => new System.Text.StringBuilder(source.Name));
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }

        protected System.Lazy<System.Nullable<int>> _topDelegate;

        protected System.Lazy<bool> _topPercentDelegate;

        protected System.Lazy<bool> _distinctDelegate;

        protected System.Lazy<System.Text.StringBuilder> _definitionDelegate;

        protected System.Lazy<System.Text.StringBuilder> _nameDelegate;
    }
#nullable restore
}

