// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 5.0.13
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ModelFramework.Database.Builders
{
#nullable enable
    public partial class CheckConstraintBuilder
    {
        public string Expression
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.ICheckConstraint Build()
        {
            return new ModelFramework.Database.Default.CheckConstraint(Expression, Name, Metadata.Select(x => x.Build()));
        }

        public CheckConstraintBuilder WithExpression(string expression)
        {
            Expression = expression;
            return this;
        }

        public CheckConstraintBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public CheckConstraintBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public CheckConstraintBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public CheckConstraintBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public CheckConstraintBuilder()
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Expression = string.Empty;
            Name = string.Empty;
        }

        public CheckConstraintBuilder(ModelFramework.Database.Contracts.ICheckConstraint source)
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Expression = source.Expression;
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class DefaultValueConstraintBuilder
    {
        public string FieldName
        {
            get;
            set;
        }

        public string DefaultValue
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IDefaultValueConstraint Build()
        {
            return new ModelFramework.Database.Default.DefaultValueConstraint(FieldName, DefaultValue, Name, Metadata.Select(x => x.Build()));
        }

        public DefaultValueConstraintBuilder WithFieldName(string fieldName)
        {
            FieldName = fieldName;
            return this;
        }

        public DefaultValueConstraintBuilder WithDefaultValue(string defaultValue)
        {
            DefaultValue = defaultValue;
            return this;
        }

        public DefaultValueConstraintBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public DefaultValueConstraintBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public DefaultValueConstraintBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public DefaultValueConstraintBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public DefaultValueConstraintBuilder()
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            FieldName = string.Empty;
            DefaultValue = string.Empty;
            Name = string.Empty;
        }

        public DefaultValueConstraintBuilder(ModelFramework.Database.Contracts.IDefaultValueConstraint source)
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            FieldName = source.FieldName;
            DefaultValue = source.DefaultValue;
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class ForeignKeyConstraintBuilder
    {
        public System.Collections.Generic.List<ModelFramework.Database.Builders.ForeignKeyConstraintFieldBuilder> LocalFields
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.ForeignKeyConstraintFieldBuilder> ForeignFields
        {
            get;
            set;
        }

        public string ForeignTableName
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.CascadeAction CascadeUpdate
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.CascadeAction CascadeDelete
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IForeignKeyConstraint Build()
        {
            return new ModelFramework.Database.Default.ForeignKeyConstraint(LocalFields.Select(x => x.Build()), ForeignFields.Select(x => x.Build()), ForeignTableName, CascadeUpdate, CascadeDelete, Name, Metadata.Select(x => x.Build()));
        }

        public ForeignKeyConstraintBuilder AddLocalFields(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ForeignKeyConstraintFieldBuilder> localFields)
        {
            return AddLocalFields(localFields.ToArray());
        }

        public ForeignKeyConstraintBuilder AddLocalFields(params ModelFramework.Database.Builders.ForeignKeyConstraintFieldBuilder[] localFields)
        {
            LocalFields.AddRange(localFields);
            return this;
        }

        public ForeignKeyConstraintBuilder AddForeignFields(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ForeignKeyConstraintFieldBuilder> foreignFields)
        {
            return AddForeignFields(foreignFields.ToArray());
        }

        public ForeignKeyConstraintBuilder AddForeignFields(params ModelFramework.Database.Builders.ForeignKeyConstraintFieldBuilder[] foreignFields)
        {
            ForeignFields.AddRange(foreignFields);
            return this;
        }

        public ForeignKeyConstraintBuilder WithForeignTableName(string foreignTableName)
        {
            ForeignTableName = foreignTableName;
            return this;
        }

        public ForeignKeyConstraintBuilder WithCascadeUpdate(ModelFramework.Database.Contracts.CascadeAction cascadeUpdate)
        {
            CascadeUpdate = cascadeUpdate;
            return this;
        }

        public ForeignKeyConstraintBuilder WithCascadeDelete(ModelFramework.Database.Contracts.CascadeAction cascadeDelete)
        {
            CascadeDelete = cascadeDelete;
            return this;
        }

        public ForeignKeyConstraintBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public ForeignKeyConstraintBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public ForeignKeyConstraintBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public ForeignKeyConstraintBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public ForeignKeyConstraintBuilder()
        {
            LocalFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ForeignKeyConstraintFieldBuilder>();
            ForeignFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ForeignKeyConstraintFieldBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            ForeignTableName = string.Empty;
            CascadeUpdate = default;
            CascadeDelete = default;
            Name = string.Empty;
        }

        public ForeignKeyConstraintBuilder(ModelFramework.Database.Contracts.IForeignKeyConstraint source)
        {
            LocalFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ForeignKeyConstraintFieldBuilder>();
            ForeignFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ForeignKeyConstraintFieldBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            LocalFields.AddRange(source.LocalFields.Select(x => new ModelFramework.Database.Builders.ForeignKeyConstraintFieldBuilder(x)));
            ForeignFields.AddRange(source.ForeignFields.Select(x => new ModelFramework.Database.Builders.ForeignKeyConstraintFieldBuilder(x)));
            ForeignTableName = source.ForeignTableName;
            CascadeUpdate = source.CascadeUpdate;
            CascadeDelete = source.CascadeDelete;
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class ForeignKeyConstraintFieldBuilder
    {
        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IForeignKeyConstraintField Build()
        {
            return new ModelFramework.Database.Default.ForeignKeyConstraintField(Name, Metadata.Select(x => x.Build()));
        }

        public ForeignKeyConstraintFieldBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public ForeignKeyConstraintFieldBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public ForeignKeyConstraintFieldBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public ForeignKeyConstraintFieldBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public ForeignKeyConstraintFieldBuilder()
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Name = string.Empty;
        }

        public ForeignKeyConstraintFieldBuilder(ModelFramework.Database.Contracts.IForeignKeyConstraintField source)
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class IndexBuilder
    {
        public System.Collections.Generic.List<ModelFramework.Database.Builders.IndexFieldBuilder> Fields
        {
            get;
            set;
        }

        public bool Unique
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public string FileGroupName
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IIndex Build()
        {
            return new ModelFramework.Database.Default.Index(Fields.Select(x => x.Build()), Unique, Name, Metadata.Select(x => x.Build()), FileGroupName);
        }

        public IndexBuilder AddFields(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.IndexFieldBuilder> fields)
        {
            return AddFields(fields.ToArray());
        }

        public IndexBuilder AddFields(params ModelFramework.Database.Builders.IndexFieldBuilder[] fields)
        {
            Fields.AddRange(fields);
            return this;
        }

        public IndexBuilder WithUnique(bool unique = true)
        {
            Unique = unique;
            return this;
        }

        public IndexBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public IndexBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public IndexBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public IndexBuilder WithFileGroupName(string fileGroupName)
        {
            FileGroupName = fileGroupName;
            return this;
        }

        public IndexBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public IndexBuilder()
        {
            Fields = new System.Collections.Generic.List<ModelFramework.Database.Builders.IndexFieldBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Unique = default;
            Name = string.Empty;
            FileGroupName = string.Empty;
        }

        public IndexBuilder(ModelFramework.Database.Contracts.IIndex source)
        {
            Fields = new System.Collections.Generic.List<ModelFramework.Database.Builders.IndexFieldBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Fields.AddRange(source.Fields.Select(x => new ModelFramework.Database.Builders.IndexFieldBuilder(x)));
            Unique = source.Unique;
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
            FileGroupName = source.FileGroupName;
        }
    }
#nullable restore

#nullable enable
    public partial class IndexFieldBuilder
    {
        public bool IsDescending
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IIndexField Build()
        {
            return new ModelFramework.Database.Default.IndexField(IsDescending, Name, Metadata.Select(x => x.Build()));
        }

        public IndexFieldBuilder WithIsDescending(bool isDescending = true)
        {
            IsDescending = isDescending;
            return this;
        }

        public IndexFieldBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public IndexFieldBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public IndexFieldBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public IndexFieldBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public IndexFieldBuilder()
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            IsDescending = default;
            Name = string.Empty;
        }

        public IndexFieldBuilder(ModelFramework.Database.Contracts.IIndexField source)
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            IsDescending = source.IsDescending;
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class PrimaryKeyConstraintBuilder
    {
        public System.Collections.Generic.List<ModelFramework.Database.Builders.PrimaryKeyConstraintFieldBuilder> Fields
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public string FileGroupName
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IPrimaryKeyConstraint Build()
        {
            return new ModelFramework.Database.Default.PrimaryKeyConstraint(Fields.Select(x => x.Build()), Name, Metadata.Select(x => x.Build()), FileGroupName);
        }

        public PrimaryKeyConstraintBuilder AddFields(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.PrimaryKeyConstraintFieldBuilder> fields)
        {
            return AddFields(fields.ToArray());
        }

        public PrimaryKeyConstraintBuilder AddFields(params ModelFramework.Database.Builders.PrimaryKeyConstraintFieldBuilder[] fields)
        {
            Fields.AddRange(fields);
            return this;
        }

        public PrimaryKeyConstraintBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public PrimaryKeyConstraintBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public PrimaryKeyConstraintBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public PrimaryKeyConstraintBuilder WithFileGroupName(string fileGroupName)
        {
            FileGroupName = fileGroupName;
            return this;
        }

        public PrimaryKeyConstraintBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public PrimaryKeyConstraintBuilder()
        {
            Fields = new System.Collections.Generic.List<ModelFramework.Database.Builders.PrimaryKeyConstraintFieldBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Name = string.Empty;
            FileGroupName = string.Empty;
        }

        public PrimaryKeyConstraintBuilder(ModelFramework.Database.Contracts.IPrimaryKeyConstraint source)
        {
            Fields = new System.Collections.Generic.List<ModelFramework.Database.Builders.PrimaryKeyConstraintFieldBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Fields.AddRange(source.Fields.Select(x => new ModelFramework.Database.Builders.PrimaryKeyConstraintFieldBuilder(x)));
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
            FileGroupName = source.FileGroupName;
        }
    }
#nullable restore

#nullable enable
    public partial class PrimaryKeyConstraintFieldBuilder
    {
        public bool IsDescending
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IPrimaryKeyConstraintField Build()
        {
            return new ModelFramework.Database.Default.PrimaryKeyConstraintField(IsDescending, Name, Metadata.Select(x => x.Build()));
        }

        public PrimaryKeyConstraintFieldBuilder WithIsDescending(bool isDescending = true)
        {
            IsDescending = isDescending;
            return this;
        }

        public PrimaryKeyConstraintFieldBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public PrimaryKeyConstraintFieldBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public PrimaryKeyConstraintFieldBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public PrimaryKeyConstraintFieldBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public PrimaryKeyConstraintFieldBuilder()
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            IsDescending = default;
            Name = string.Empty;
        }

        public PrimaryKeyConstraintFieldBuilder(ModelFramework.Database.Contracts.IPrimaryKeyConstraintField source)
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            IsDescending = source.IsDescending;
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class SchemaBuilder
    {
        public System.Collections.Generic.List<ModelFramework.Database.Builders.TableBuilder> Tables
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.StoredProcedureBuilder> StoredProcedures
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.ViewBuilder> Views
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.ISchema Build()
        {
            return new ModelFramework.Database.Default.Schema(Tables.Select(x => x.Build()), StoredProcedures.Select(x => x.Build()), Views.Select(x => x.Build()), Name, Metadata.Select(x => x.Build()));
        }

        public SchemaBuilder AddTables(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.TableBuilder> tables)
        {
            return AddTables(tables.ToArray());
        }

        public SchemaBuilder AddTables(params ModelFramework.Database.Builders.TableBuilder[] tables)
        {
            Tables.AddRange(tables);
            return this;
        }

        public SchemaBuilder AddStoredProcedures(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.StoredProcedureBuilder> storedProcedures)
        {
            return AddStoredProcedures(storedProcedures.ToArray());
        }

        public SchemaBuilder AddStoredProcedures(params ModelFramework.Database.Builders.StoredProcedureBuilder[] storedProcedures)
        {
            StoredProcedures.AddRange(storedProcedures);
            return this;
        }

        public SchemaBuilder AddViews(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ViewBuilder> views)
        {
            return AddViews(views.ToArray());
        }

        public SchemaBuilder AddViews(params ModelFramework.Database.Builders.ViewBuilder[] views)
        {
            Views.AddRange(views);
            return this;
        }

        public SchemaBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public SchemaBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public SchemaBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public SchemaBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public SchemaBuilder()
        {
            Tables = new System.Collections.Generic.List<ModelFramework.Database.Builders.TableBuilder>();
            StoredProcedures = new System.Collections.Generic.List<ModelFramework.Database.Builders.StoredProcedureBuilder>();
            Views = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Name = string.Empty;
        }

        public SchemaBuilder(ModelFramework.Database.Contracts.ISchema source)
        {
            Tables = new System.Collections.Generic.List<ModelFramework.Database.Builders.TableBuilder>();
            StoredProcedures = new System.Collections.Generic.List<ModelFramework.Database.Builders.StoredProcedureBuilder>();
            Views = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Tables.AddRange(source.Tables.Select(x => new ModelFramework.Database.Builders.TableBuilder(x)));
            StoredProcedures.AddRange(source.StoredProcedures.Select(x => new ModelFramework.Database.Builders.StoredProcedureBuilder(x)));
            Views.AddRange(source.Views.Select(x => new ModelFramework.Database.Builders.ViewBuilder(x)));
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class StoredProcedureBuilder
    {
        public System.Collections.Generic.List<ModelFramework.Database.Contracts.ISqlStatementBuilder> Statements
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.StoredProcedureParameterBuilder> Parameters
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IStoredProcedure Build()
        {
            return new ModelFramework.Database.Default.StoredProcedure(Statements.Select(x => x.Build()), Parameters.Select(x => x.Build()), Name, Metadata.Select(x => x.Build()));
        }

        public StoredProcedureBuilder AddStatements(System.Collections.Generic.IEnumerable<ModelFramework.Database.Contracts.ISqlStatementBuilder> statements)
        {
            return AddStatements(statements.ToArray());
        }

        public StoredProcedureBuilder AddStatements(params ModelFramework.Database.Contracts.ISqlStatementBuilder[] statements)
        {
            Statements.AddRange(statements);
            return this;
        }

        public StoredProcedureBuilder AddParameters(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.StoredProcedureParameterBuilder> parameters)
        {
            return AddParameters(parameters.ToArray());
        }

        public StoredProcedureBuilder AddParameters(params ModelFramework.Database.Builders.StoredProcedureParameterBuilder[] parameters)
        {
            Parameters.AddRange(parameters);
            return this;
        }

        public StoredProcedureBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public StoredProcedureBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public StoredProcedureBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public StoredProcedureBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public StoredProcedureBuilder()
        {
            Statements = new System.Collections.Generic.List<ModelFramework.Database.Contracts.ISqlStatementBuilder>();
            Parameters = new System.Collections.Generic.List<ModelFramework.Database.Builders.StoredProcedureParameterBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Name = string.Empty;
        }

        public StoredProcedureBuilder(ModelFramework.Database.Contracts.IStoredProcedure source)
        {
            Statements = new System.Collections.Generic.List<ModelFramework.Database.Contracts.ISqlStatementBuilder>();
            Parameters = new System.Collections.Generic.List<ModelFramework.Database.Builders.StoredProcedureParameterBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Statements.AddRange(source.Statements.Select(x => x.CreateBuilder()));
            Parameters.AddRange(source.Parameters.Select(x => new ModelFramework.Database.Builders.StoredProcedureParameterBuilder(x)));
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class StoredProcedureParameterBuilder
    {
        public string Type
        {
            get;
            set;
        }

        public string DefaultValue
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IStoredProcedureParameter Build()
        {
            return new ModelFramework.Database.Default.StoredProcedureParameter(Type, DefaultValue, Name, Metadata.Select(x => x.Build()));
        }

        public StoredProcedureParameterBuilder WithType(string type)
        {
            Type = type;
            return this;
        }

        public StoredProcedureParameterBuilder WithDefaultValue(string defaultValue)
        {
            DefaultValue = defaultValue;
            return this;
        }

        public StoredProcedureParameterBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public StoredProcedureParameterBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public StoredProcedureParameterBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public StoredProcedureParameterBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public StoredProcedureParameterBuilder()
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Type = string.Empty;
            DefaultValue = string.Empty;
            Name = string.Empty;
        }

        public StoredProcedureParameterBuilder(ModelFramework.Database.Contracts.IStoredProcedureParameter source)
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Type = source.Type;
            DefaultValue = source.DefaultValue;
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class TableBuilder
    {
        public System.Collections.Generic.List<ModelFramework.Database.Builders.PrimaryKeyConstraintBuilder> PrimaryKeyConstraints
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.UniqueConstraintBuilder> UniqueConstraints
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.DefaultValueConstraintBuilder> DefaultValueConstraints
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.ForeignKeyConstraintBuilder> ForeignKeyConstraints
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.IndexBuilder> Indexes
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.TableFieldBuilder> Fields
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public string FileGroupName
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.CheckConstraintBuilder> CheckConstraints
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.ITable Build()
        {
            return new ModelFramework.Database.Default.Table(PrimaryKeyConstraints.Select(x => x.Build()), UniqueConstraints.Select(x => x.Build()), DefaultValueConstraints.Select(x => x.Build()), ForeignKeyConstraints.Select(x => x.Build()), Indexes.Select(x => x.Build()), Fields.Select(x => x.Build()), Name, Metadata.Select(x => x.Build()), FileGroupName, CheckConstraints.Select(x => x.Build()));
        }

        public TableBuilder AddPrimaryKeyConstraints(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.PrimaryKeyConstraintBuilder> primaryKeyConstraints)
        {
            return AddPrimaryKeyConstraints(primaryKeyConstraints.ToArray());
        }

        public TableBuilder AddPrimaryKeyConstraints(params ModelFramework.Database.Builders.PrimaryKeyConstraintBuilder[] primaryKeyConstraints)
        {
            PrimaryKeyConstraints.AddRange(primaryKeyConstraints);
            return this;
        }

        public TableBuilder AddUniqueConstraints(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.UniqueConstraintBuilder> uniqueConstraints)
        {
            return AddUniqueConstraints(uniqueConstraints.ToArray());
        }

        public TableBuilder AddUniqueConstraints(params ModelFramework.Database.Builders.UniqueConstraintBuilder[] uniqueConstraints)
        {
            UniqueConstraints.AddRange(uniqueConstraints);
            return this;
        }

        public TableBuilder AddDefaultValueConstraints(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.DefaultValueConstraintBuilder> defaultValueConstraints)
        {
            return AddDefaultValueConstraints(defaultValueConstraints.ToArray());
        }

        public TableBuilder AddDefaultValueConstraints(params ModelFramework.Database.Builders.DefaultValueConstraintBuilder[] defaultValueConstraints)
        {
            DefaultValueConstraints.AddRange(defaultValueConstraints);
            return this;
        }

        public TableBuilder AddForeignKeyConstraints(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ForeignKeyConstraintBuilder> foreignKeyConstraints)
        {
            return AddForeignKeyConstraints(foreignKeyConstraints.ToArray());
        }

        public TableBuilder AddForeignKeyConstraints(params ModelFramework.Database.Builders.ForeignKeyConstraintBuilder[] foreignKeyConstraints)
        {
            ForeignKeyConstraints.AddRange(foreignKeyConstraints);
            return this;
        }

        public TableBuilder AddIndexes(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.IndexBuilder> indexes)
        {
            return AddIndexes(indexes.ToArray());
        }

        public TableBuilder AddIndexes(params ModelFramework.Database.Builders.IndexBuilder[] indexes)
        {
            Indexes.AddRange(indexes);
            return this;
        }

        public TableBuilder AddFields(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.TableFieldBuilder> fields)
        {
            return AddFields(fields.ToArray());
        }

        public TableBuilder AddFields(params ModelFramework.Database.Builders.TableFieldBuilder[] fields)
        {
            Fields.AddRange(fields);
            return this;
        }

        public TableBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public TableBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public TableBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public TableBuilder WithFileGroupName(string fileGroupName)
        {
            FileGroupName = fileGroupName;
            return this;
        }

        public TableBuilder AddCheckConstraints(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.CheckConstraintBuilder> checkConstraints)
        {
            return AddCheckConstraints(checkConstraints.ToArray());
        }

        public TableBuilder AddCheckConstraints(params ModelFramework.Database.Builders.CheckConstraintBuilder[] checkConstraints)
        {
            CheckConstraints.AddRange(checkConstraints);
            return this;
        }

        public TableBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public TableBuilder()
        {
            PrimaryKeyConstraints = new System.Collections.Generic.List<ModelFramework.Database.Builders.PrimaryKeyConstraintBuilder>();
            UniqueConstraints = new System.Collections.Generic.List<ModelFramework.Database.Builders.UniqueConstraintBuilder>();
            DefaultValueConstraints = new System.Collections.Generic.List<ModelFramework.Database.Builders.DefaultValueConstraintBuilder>();
            ForeignKeyConstraints = new System.Collections.Generic.List<ModelFramework.Database.Builders.ForeignKeyConstraintBuilder>();
            Indexes = new System.Collections.Generic.List<ModelFramework.Database.Builders.IndexBuilder>();
            Fields = new System.Collections.Generic.List<ModelFramework.Database.Builders.TableFieldBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            CheckConstraints = new System.Collections.Generic.List<ModelFramework.Database.Builders.CheckConstraintBuilder>();
            Name = string.Empty;
            FileGroupName = string.Empty;
        }

        public TableBuilder(ModelFramework.Database.Contracts.ITable source)
        {
            PrimaryKeyConstraints = new System.Collections.Generic.List<ModelFramework.Database.Builders.PrimaryKeyConstraintBuilder>();
            UniqueConstraints = new System.Collections.Generic.List<ModelFramework.Database.Builders.UniqueConstraintBuilder>();
            DefaultValueConstraints = new System.Collections.Generic.List<ModelFramework.Database.Builders.DefaultValueConstraintBuilder>();
            ForeignKeyConstraints = new System.Collections.Generic.List<ModelFramework.Database.Builders.ForeignKeyConstraintBuilder>();
            Indexes = new System.Collections.Generic.List<ModelFramework.Database.Builders.IndexBuilder>();
            Fields = new System.Collections.Generic.List<ModelFramework.Database.Builders.TableFieldBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            CheckConstraints = new System.Collections.Generic.List<ModelFramework.Database.Builders.CheckConstraintBuilder>();
            PrimaryKeyConstraints.AddRange(source.PrimaryKeyConstraints.Select(x => new ModelFramework.Database.Builders.PrimaryKeyConstraintBuilder(x)));
            UniqueConstraints.AddRange(source.UniqueConstraints.Select(x => new ModelFramework.Database.Builders.UniqueConstraintBuilder(x)));
            DefaultValueConstraints.AddRange(source.DefaultValueConstraints.Select(x => new ModelFramework.Database.Builders.DefaultValueConstraintBuilder(x)));
            ForeignKeyConstraints.AddRange(source.ForeignKeyConstraints.Select(x => new ModelFramework.Database.Builders.ForeignKeyConstraintBuilder(x)));
            Indexes.AddRange(source.Indexes.Select(x => new ModelFramework.Database.Builders.IndexBuilder(x)));
            Fields.AddRange(source.Fields.Select(x => new ModelFramework.Database.Builders.TableFieldBuilder(x)));
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
            FileGroupName = source.FileGroupName;
            CheckConstraints.AddRange(source.CheckConstraints.Select(x => new ModelFramework.Database.Builders.CheckConstraintBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class TableFieldBuilder
    {
        public string Type
        {
            get;
            set;
        }

        public bool IsIdentity
        {
            get;
            set;
        }

        public bool IsRequired
        {
            get;
            set;
        }

        public System.Nullable<byte> NumericPrecision
        {
            get;
            set;
        }

        public System.Nullable<byte> NumericScale
        {
            get;
            set;
        }

        public System.Nullable<int> StringLength
        {
            get;
            set;
        }

        public string StringCollation
        {
            get;
            set;
        }

        public bool IsStringMaxLength
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.CheckConstraintBuilder> CheckConstraints
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.ITableField Build()
        {
            return new ModelFramework.Database.Default.TableField(Type, IsIdentity, IsRequired, NumericPrecision, NumericScale, StringLength, StringCollation, IsStringMaxLength, Name, Metadata.Select(x => x.Build()), CheckConstraints.Select(x => x.Build()));
        }

        public TableFieldBuilder WithType(string type)
        {
            Type = type;
            return this;
        }

        public TableFieldBuilder WithIsIdentity(bool isIdentity = true)
        {
            IsIdentity = isIdentity;
            return this;
        }

        public TableFieldBuilder WithIsRequired(bool isRequired = true)
        {
            IsRequired = isRequired;
            return this;
        }

        public TableFieldBuilder WithNumericPrecision(System.Nullable<byte> numericPrecision)
        {
            NumericPrecision = numericPrecision;
            return this;
        }

        public TableFieldBuilder WithNumericScale(System.Nullable<byte> numericScale)
        {
            NumericScale = numericScale;
            return this;
        }

        public TableFieldBuilder WithStringLength(System.Nullable<int> stringLength)
        {
            StringLength = stringLength;
            return this;
        }

        public TableFieldBuilder WithStringCollation(string stringCollation)
        {
            StringCollation = stringCollation;
            return this;
        }

        public TableFieldBuilder WithIsStringMaxLength(bool isStringMaxLength = true)
        {
            IsStringMaxLength = isStringMaxLength;
            return this;
        }

        public TableFieldBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public TableFieldBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public TableFieldBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public TableFieldBuilder AddCheckConstraints(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.CheckConstraintBuilder> checkConstraints)
        {
            return AddCheckConstraints(checkConstraints.ToArray());
        }

        public TableFieldBuilder AddCheckConstraints(params ModelFramework.Database.Builders.CheckConstraintBuilder[] checkConstraints)
        {
            CheckConstraints.AddRange(checkConstraints);
            return this;
        }

        public TableFieldBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public TableFieldBuilder()
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            CheckConstraints = new System.Collections.Generic.List<ModelFramework.Database.Builders.CheckConstraintBuilder>();
            Type = string.Empty;
            IsIdentity = default;
            IsRequired = default;
            StringCollation = string.Empty;
            IsStringMaxLength = default;
            Name = string.Empty;
        }

        public TableFieldBuilder(ModelFramework.Database.Contracts.ITableField source)
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            CheckConstraints = new System.Collections.Generic.List<ModelFramework.Database.Builders.CheckConstraintBuilder>();
            Type = source.Type;
            IsIdentity = source.IsIdentity;
            IsRequired = source.IsRequired;
            NumericPrecision = source.NumericPrecision;
            NumericScale = source.NumericScale;
            StringLength = source.StringLength;
            StringCollation = source.StringCollation;
            IsStringMaxLength = source.IsStringMaxLength;
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
            CheckConstraints.AddRange(source.CheckConstraints.Select(x => new ModelFramework.Database.Builders.CheckConstraintBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class UniqueConstraintBuilder
    {
        public System.Collections.Generic.List<ModelFramework.Database.Builders.UniqueConstraintFieldBuilder> Fields
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public string FileGroupName
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IUniqueConstraint Build()
        {
            return new ModelFramework.Database.Default.UniqueConstraint(Fields.Select(x => x.Build()), Name, Metadata.Select(x => x.Build()), FileGroupName);
        }

        public UniqueConstraintBuilder AddFields(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.UniqueConstraintFieldBuilder> fields)
        {
            return AddFields(fields.ToArray());
        }

        public UniqueConstraintBuilder AddFields(params ModelFramework.Database.Builders.UniqueConstraintFieldBuilder[] fields)
        {
            Fields.AddRange(fields);
            return this;
        }

        public UniqueConstraintBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public UniqueConstraintBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public UniqueConstraintBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public UniqueConstraintBuilder WithFileGroupName(string fileGroupName)
        {
            FileGroupName = fileGroupName;
            return this;
        }

        public UniqueConstraintBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public UniqueConstraintBuilder()
        {
            Fields = new System.Collections.Generic.List<ModelFramework.Database.Builders.UniqueConstraintFieldBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Name = string.Empty;
            FileGroupName = string.Empty;
        }

        public UniqueConstraintBuilder(ModelFramework.Database.Contracts.IUniqueConstraint source)
        {
            Fields = new System.Collections.Generic.List<ModelFramework.Database.Builders.UniqueConstraintFieldBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Fields.AddRange(source.Fields.Select(x => new ModelFramework.Database.Builders.UniqueConstraintFieldBuilder(x)));
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
            FileGroupName = source.FileGroupName;
        }
    }
#nullable restore

#nullable enable
    public partial class UniqueConstraintFieldBuilder
    {
        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IUniqueConstraintField Build()
        {
            return new ModelFramework.Database.Default.UniqueConstraintField(Name, Metadata.Select(x => x.Build()));
        }

        public UniqueConstraintFieldBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public UniqueConstraintFieldBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public UniqueConstraintFieldBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public UniqueConstraintFieldBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public UniqueConstraintFieldBuilder()
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Name = string.Empty;
        }

        public UniqueConstraintFieldBuilder(ModelFramework.Database.Contracts.IUniqueConstraintField source)
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class ViewBuilder
    {
        public System.Collections.Generic.List<ModelFramework.Database.Builders.ViewFieldBuilder> SelectFields
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.ViewOrderByFieldBuilder> OrderByFields
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.ViewFieldBuilder> GroupByFields
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.ViewSourceBuilder> Sources
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Database.Builders.ViewConditionBuilder> Conditions
        {
            get;
            set;
        }

        public System.Nullable<int> Top
        {
            get;
            set;
        }

        public bool TopPercent
        {
            get;
            set;
        }

        public bool Distinct
        {
            get;
            set;
        }

        public string Definition
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IView Build()
        {
            return new ModelFramework.Database.Default.View(SelectFields.Select(x => x.Build()), OrderByFields.Select(x => x.Build()), GroupByFields.Select(x => x.Build()), Sources.Select(x => x.Build()), Conditions.Select(x => x.Build()), Top, TopPercent, Distinct, Definition, Name, Metadata.Select(x => x.Build()));
        }

        public ViewBuilder AddSelectFields(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ViewFieldBuilder> selectFields)
        {
            return AddSelectFields(selectFields.ToArray());
        }

        public ViewBuilder AddSelectFields(params ModelFramework.Database.Builders.ViewFieldBuilder[] selectFields)
        {
            SelectFields.AddRange(selectFields);
            return this;
        }

        public ViewBuilder AddOrderByFields(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ViewOrderByFieldBuilder> orderByFields)
        {
            return AddOrderByFields(orderByFields.ToArray());
        }

        public ViewBuilder AddOrderByFields(params ModelFramework.Database.Builders.ViewOrderByFieldBuilder[] orderByFields)
        {
            OrderByFields.AddRange(orderByFields);
            return this;
        }

        public ViewBuilder AddGroupByFields(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ViewFieldBuilder> groupByFields)
        {
            return AddGroupByFields(groupByFields.ToArray());
        }

        public ViewBuilder AddGroupByFields(params ModelFramework.Database.Builders.ViewFieldBuilder[] groupByFields)
        {
            GroupByFields.AddRange(groupByFields);
            return this;
        }

        public ViewBuilder AddSources(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ViewSourceBuilder> sources)
        {
            return AddSources(sources.ToArray());
        }

        public ViewBuilder AddSources(params ModelFramework.Database.Builders.ViewSourceBuilder[] sources)
        {
            Sources.AddRange(sources);
            return this;
        }

        public ViewBuilder AddConditions(System.Collections.Generic.IEnumerable<ModelFramework.Database.Builders.ViewConditionBuilder> conditions)
        {
            return AddConditions(conditions.ToArray());
        }

        public ViewBuilder AddConditions(params ModelFramework.Database.Builders.ViewConditionBuilder[] conditions)
        {
            Conditions.AddRange(conditions);
            return this;
        }

        public ViewBuilder WithTop(System.Nullable<int> top)
        {
            Top = top;
            return this;
        }

        public ViewBuilder WithTopPercent(bool topPercent = true)
        {
            TopPercent = topPercent;
            return this;
        }

        public ViewBuilder WithDistinct(bool distinct = true)
        {
            Distinct = distinct;
            return this;
        }

        public ViewBuilder WithDefinition(string definition)
        {
            Definition = definition;
            return this;
        }

        public ViewBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public ViewBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public ViewBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public ViewBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public ViewBuilder()
        {
            SelectFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewFieldBuilder>();
            OrderByFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewOrderByFieldBuilder>();
            GroupByFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewFieldBuilder>();
            Sources = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewSourceBuilder>();
            Conditions = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewConditionBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            TopPercent = default;
            Distinct = default;
            Definition = string.Empty;
            Name = string.Empty;
        }

        public ViewBuilder(ModelFramework.Database.Contracts.IView source)
        {
            SelectFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewFieldBuilder>();
            OrderByFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewOrderByFieldBuilder>();
            GroupByFields = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewFieldBuilder>();
            Sources = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewSourceBuilder>();
            Conditions = new System.Collections.Generic.List<ModelFramework.Database.Builders.ViewConditionBuilder>();
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            SelectFields.AddRange(source.SelectFields.Select(x => new ModelFramework.Database.Builders.ViewFieldBuilder(x)));
            OrderByFields.AddRange(source.OrderByFields.Select(x => new ModelFramework.Database.Builders.ViewOrderByFieldBuilder(x)));
            GroupByFields.AddRange(source.GroupByFields.Select(x => new ModelFramework.Database.Builders.ViewFieldBuilder(x)));
            Sources.AddRange(source.Sources.Select(x => new ModelFramework.Database.Builders.ViewSourceBuilder(x)));
            Conditions.AddRange(source.Conditions.Select(x => new ModelFramework.Database.Builders.ViewConditionBuilder(x)));
            Top = source.Top;
            TopPercent = source.TopPercent;
            Distinct = source.Distinct;
            Definition = source.Definition;
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class ViewConditionBuilder
    {
        public string Expression
        {
            get;
            set;
        }

        public string Combination
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public string FileGroupName
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IViewCondition Build()
        {
            return new ModelFramework.Database.Default.ViewCondition(Expression, Combination, Metadata.Select(x => x.Build()), FileGroupName);
        }

        public ViewConditionBuilder WithExpression(string expression)
        {
            Expression = expression;
            return this;
        }

        public ViewConditionBuilder WithCombination(string combination)
        {
            Combination = combination;
            return this;
        }

        public ViewConditionBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public ViewConditionBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public ViewConditionBuilder WithFileGroupName(string fileGroupName)
        {
            FileGroupName = fileGroupName;
            return this;
        }

        public ViewConditionBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public ViewConditionBuilder()
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Expression = string.Empty;
            Combination = string.Empty;
            FileGroupName = string.Empty;
        }

        public ViewConditionBuilder(ModelFramework.Database.Contracts.IViewCondition source)
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Expression = source.Expression;
            Combination = source.Combination;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
            FileGroupName = source.FileGroupName;
        }
    }
#nullable restore

#nullable enable
    public partial class ViewFieldBuilder
    {
        public string SourceSchemaName
        {
            get;
            set;
        }

        public string SourceObjectName
        {
            get;
            set;
        }

        public string Expression
        {
            get;
            set;
        }

        public string Alias
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IViewField Build()
        {
            return new ModelFramework.Database.Default.ViewField(SourceSchemaName, SourceObjectName, Expression, Alias, Name, Metadata.Select(x => x.Build()));
        }

        public ViewFieldBuilder WithSourceSchemaName(string sourceSchemaName)
        {
            SourceSchemaName = sourceSchemaName;
            return this;
        }

        public ViewFieldBuilder WithSourceObjectName(string sourceObjectName)
        {
            SourceObjectName = sourceObjectName;
            return this;
        }

        public ViewFieldBuilder WithExpression(string expression)
        {
            Expression = expression;
            return this;
        }

        public ViewFieldBuilder WithAlias(string alias)
        {
            Alias = alias;
            return this;
        }

        public ViewFieldBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public ViewFieldBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public ViewFieldBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public ViewFieldBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public ViewFieldBuilder()
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            SourceSchemaName = string.Empty;
            SourceObjectName = string.Empty;
            Expression = string.Empty;
            Alias = string.Empty;
            Name = string.Empty;
        }

        public ViewFieldBuilder(ModelFramework.Database.Contracts.IViewField source)
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            SourceSchemaName = source.SourceSchemaName;
            SourceObjectName = source.SourceObjectName;
            Expression = source.Expression;
            Alias = source.Alias;
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class ViewOrderByFieldBuilder
    {
        public bool IsDescending
        {
            get;
            set;
        }

        public string SourceSchemaName
        {
            get;
            set;
        }

        public string SourceObjectName
        {
            get;
            set;
        }

        public string Expression
        {
            get;
            set;
        }

        public string Alias
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IViewOrderByField Build()
        {
            return new ModelFramework.Database.Default.ViewOrderByField(IsDescending, SourceSchemaName, SourceObjectName, Expression, Alias, Name, Metadata.Select(x => x.Build()));
        }

        public ViewOrderByFieldBuilder WithIsDescending(bool isDescending = true)
        {
            IsDescending = isDescending;
            return this;
        }

        public ViewOrderByFieldBuilder WithSourceSchemaName(string sourceSchemaName)
        {
            SourceSchemaName = sourceSchemaName;
            return this;
        }

        public ViewOrderByFieldBuilder WithSourceObjectName(string sourceObjectName)
        {
            SourceObjectName = sourceObjectName;
            return this;
        }

        public ViewOrderByFieldBuilder WithExpression(string expression)
        {
            Expression = expression;
            return this;
        }

        public ViewOrderByFieldBuilder WithAlias(string alias)
        {
            Alias = alias;
            return this;
        }

        public ViewOrderByFieldBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public ViewOrderByFieldBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public ViewOrderByFieldBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public ViewOrderByFieldBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public ViewOrderByFieldBuilder()
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            IsDescending = default;
            SourceSchemaName = string.Empty;
            SourceObjectName = string.Empty;
            Expression = string.Empty;
            Alias = string.Empty;
            Name = string.Empty;
        }

        public ViewOrderByFieldBuilder(ModelFramework.Database.Contracts.IViewOrderByField source)
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            IsDescending = source.IsDescending;
            SourceSchemaName = source.SourceSchemaName;
            SourceObjectName = source.SourceObjectName;
            Expression = source.Expression;
            Alias = source.Alias;
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore

#nullable enable
    public partial class ViewSourceBuilder
    {
        public string Alias
        {
            get;
            set;
        }

        public string SourceSchemaName
        {
            get;
            set;
        }

        public string SourceObjectName
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder> Metadata
        {
            get;
            set;
        }

        public ModelFramework.Database.Contracts.IViewSource Build()
        {
            return new ModelFramework.Database.Default.ViewSource(Alias, SourceSchemaName, SourceObjectName, Name, Metadata.Select(x => x.Build()));
        }

        public ViewSourceBuilder WithAlias(string alias)
        {
            Alias = alias;
            return this;
        }

        public ViewSourceBuilder WithSourceSchemaName(string sourceSchemaName)
        {
            SourceSchemaName = sourceSchemaName;
            return this;
        }

        public ViewSourceBuilder WithSourceObjectName(string sourceObjectName)
        {
            SourceObjectName = sourceObjectName;
            return this;
        }

        public ViewSourceBuilder WithName(string name)
        {
            Name = name;
            return this;
        }

        public ViewSourceBuilder AddMetadata(System.Collections.Generic.IEnumerable<ModelFramework.Common.Builders.MetadataBuilder> metadata)
        {
            return AddMetadata(metadata.ToArray());
        }

        public ViewSourceBuilder AddMetadata(params ModelFramework.Common.Builders.MetadataBuilder[] metadata)
        {
            Metadata.AddRange(metadata);
            return this;
        }

        public ViewSourceBuilder AddMetadata(string name, object? value)
        {
            AddMetadata(new ModelFramework.Common.Builders.MetadataBuilder().WithName(name).WithValue(value));
            return this;
        }

        public ViewSourceBuilder()
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Alias = string.Empty;
            SourceSchemaName = string.Empty;
            SourceObjectName = string.Empty;
            Name = string.Empty;
        }

        public ViewSourceBuilder(ModelFramework.Database.Contracts.IViewSource source)
        {
            Metadata = new System.Collections.Generic.List<ModelFramework.Common.Builders.MetadataBuilder>();
            Alias = source.Alias;
            SourceSchemaName = source.SourceSchemaName;
            SourceObjectName = source.SourceObjectName;
            Name = source.Name;
            Metadata.AddRange(source.Metadata.Select(x => new ModelFramework.Common.Builders.MetadataBuilder(x)));
        }
    }
#nullable restore
}
