// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 5.0.13
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ModelFramework.Generators.Database
{
    using CrossCutting.Common.Extensions;
    using ModelFramework.Common;
    using ModelFramework.Common.Contracts;
    using ModelFramework.Common.Extensions;
    using ModelFramework.Database.Contracts;
    using ModelFramework.Database.Extensions;
    using ModelFramework.Database.SqlStatements;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using TextTemplateTransformationFramework.Runtime;

    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public partial class SqlServerDatabaseSchemaGenerator : SqlServerDatabaseSchemaGeneratorBase
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultSchemaTemplate", Model, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });


            if (builder != null) this.GenerationEnvironment = backup;
        }


        protected System.Boolean _createCodeGenerationHeaderField;

        /// <summary>
        /// Access the CreateCodeGenerationHeader parameter of the template.
        /// </summary>
        public System.Boolean CreateCodeGenerationHeader
        {
            get
            {
                return this._createCodeGenerationHeaderField;
            }
        }
        protected System.Collections.Generic.IEnumerable<ModelFramework.Database.Contracts.ISchema> _modelField;

        /// <summary>
        /// Access the Model parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        public System.Collections.Generic.IEnumerable<ModelFramework.Database.Contracts.ISchema> Model
        {
            get
            {
                return this._modelField;
            }
        }

        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            PlaceholderChildrenDictionary.Clear();
            this.ChildTemplates.Clear();
            this.ViewModels.Clear();
            RegisterChildTemplate(@"CommaAndNewLine", () => new CommaAndNewLine());
            RegisterChildTemplate(@"CommaAndSpace", () => new CommaAndSpace());
            RegisterChildTemplate(@"NewLine", () => new NewLine());
            if (additionalActionDelegate != null)
            {
                additionalActionDelegate();
            }
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultCheckConstraintTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultCheckConstraintTemplate(), typeof(ICheckConstraint));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultDefaultValueConstraintTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultDefaultValueConstraintTemplate(), typeof(IDefaultValueConstraint));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultFieldTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultFieldTemplate(), typeof(ITableField));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultFieldTypeTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultFieldTypeTemplate(), typeof(ITableField));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultForeignKeyTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultForeignKeyTemplate(), typeof(ITable));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultForeignKeyConstraintTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultForeignKeyConstraintTemplate(), typeof(IForeignKeyConstraint));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultForeignKeyConstraintFieldTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultForeignKeyConstraintFieldTemplate(), typeof(IForeignKeyConstraintField));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultIndexTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultIndexTemplate(), typeof(IIndex));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultIndexFieldTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultIndexFieldTemplate(), typeof(IIndexField));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultPrimaryKeyConstraintTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultPrimaryKeyConstraintTemplate(), typeof(IPrimaryKeyConstraint));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultPrimaryKeyConstraintFieldTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultPrimaryKeyConstraintFieldTemplate(), typeof(IPrimaryKeyConstraintField));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultSchemaTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultSchemaTemplate(), typeof(ISchema));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultStoredProcedureTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultStoredProcedureTemplate(), typeof(IStoredProcedure));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultStoredProcedureParameterTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultStoredProcedureParameterTemplate(), typeof(IStoredProcedureParameter));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultTableTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultTableTemplate(), typeof(ITable));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultUniqueConstraintTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultUniqueConstraintTemplate(), typeof(IUniqueConstraint));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultUniqueConstraintFieldTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultUniqueConstraintFieldTemplate(), typeof(IUniqueConstraintField));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewConditionTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultViewConditionTemplate(), typeof(IViewCondition));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewConditionsTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultViewConditionsTemplate(), typeof(IView));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultViewTemplate(), typeof(IView));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewFieldTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultViewFieldTemplate(), typeof(IViewField));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewGroupByFieldsTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultViewGroupByFieldsTemplate(), typeof(IView));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewOrderByFieldsTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultViewOrderByFieldsTemplate(), typeof(IView));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewSelectFieldsTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultViewSelectFieldsTemplate(), typeof(IView));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewSourceTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultViewSourceTemplate(), typeof(IViewSource));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewSourcesTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultViewSourcesTemplate(), typeof(IView));
            RegisterChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultLiteralSqlStatementTemplate", () => new SqlServerDatabaseSchemaGenerator_DefaultLiteralSqlStatementTemplate(), typeof(LiteralSqlStatement));
            RegisterViewModel(@"SqlServerDatabaseSchemaGenerator.DefaultDefaultValueConstraintViewModel", () => new SqlServerDatabaseSchemaGenerator_DefaultDefaultValueConstraintViewModel(), typeof(IDefaultValueConstraint));
            bool createCodeGenerationHeaderValueAcquired = false;
            if (this.Session != null && this.Session.ContainsKey("CreateCodeGenerationHeader") && this.Session["CreateCodeGenerationHeader"] != null)
            {
                if ((typeof(System.Boolean).IsAssignableFrom(this.Session["CreateCodeGenerationHeader"].GetType()) == false))
                {
                    this.Error("The type \'System.Boolean\' of the parameter \'CreateCodeGenerationHeader\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._createCodeGenerationHeaderField = ((System.Boolean)(this.Session["CreateCodeGenerationHeader"]));
                    createCodeGenerationHeaderValueAcquired = true;
                }
            }
            if ((createCodeGenerationHeaderValueAcquired == false))
            {
                this._createCodeGenerationHeaderField = default(System.Boolean);
                createCodeGenerationHeaderValueAcquired = true;
            }
            if (this.Session != null && this.Session.ContainsKey("Model") && this.Session["Model"] != null)
            {
                if ((typeof(System.Collections.Generic.IEnumerable<ModelFramework.Database.Contracts.ISchema>).IsAssignableFrom(this.Session["Model"].GetType()) == false))
                {
                    this.Error("The type \'System.Collections.Generic.IEnumerable<ModelFramework.Database.Contracts.ISchema>\' of the parameter \'Model\' did not match the type of the data passed to the template.");
                }
                else
                {
                    this._modelField = ((System.Collections.Generic.IEnumerable<ModelFramework.Database.Contracts.ISchema>)(this.Session["Model"]));
                }
            }

        }

    }

    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public partial class SqlServerDatabaseSchemaGeneratorBase : ModelFramework.Generators.Shared.ModelFrameworkGeneratorBase
    {

        public bool ResolveDatabaseCodeTemplateFromMetadata(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return ResolveFromMetadata(templateName, childTemplateName, childTemplateModelType, model, ModelFramework.Database.MetadataNames.CodeTemplateName);
        }

        public bool ResolveFieldTypeTemplateFromMetadata(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return ResolveFromMetadata(templateName, childTemplateName, childTemplateModelType, model, ModelFramework.Database.MetadataNames.FieldTypeTemplateName);
        }

        public bool ResolveCheckConstraintTemplateFromMetadata(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return ResolveFromMetadata(templateName, childTemplateName, childTemplateModelType, model, ModelFramework.Database.MetadataNames.CheckConstraintTemplateName);
        }

        public bool ResolveFieldAndPrimaryKeyFromMetadata(string templateName, string childTemplateName, Type childTemplateModelType, object model)
        {
            return ResolveFromMetadata(templateName.WhenNullOrEmpty(() => model is IMetadataContainer ? ((IMetadataContainer)model).Metadata.GetStringValue(ModelFramework.Common.MetadataNames.CustomTemplateName) : null).WhenNullOrEmpty(() => GetTemplateNameByModelType(model)), childTemplateName, childTemplateModelType, model, ModelFramework.Common.MetadataNames.CustomTemplateName);
        }

        protected override string GetTemplateNameByModelType(object model)
        {
            return model is ModelFramework.Database.Contracts.ITableField
                ? "SqlServerDatabaseSchemaGenerator.DefaultFieldTemplate"
                : model is ModelFramework.Database.Contracts.IPrimaryKeyConstraint
                    ? "SqlServerDatabaseSchemaGenerator.DefaultPrimaryKeyConstraintTemplate"
                    : model is ModelFramework.Database.Contracts.IUniqueConstraint
                        ? "SqlServerDatabaseSchemaGenerator.DefaultUniqueConstraintTemplate"
                        : null;
        }


    }
    #endregion
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGeneratorBaseChild : SqlServerDatabaseSchemaGeneratorBase
    {
        public SqlServerDatabaseSchemaGenerator RootTemplate { get; set; }

        public override void Write(string textToAppend)
        {
            if (RootTemplate != null)
            {
                RootTemplate.Write(textToAppend);
            }
            else
            {
                base.Write(textToAppend);
            }
        }

        public override void WriteLine(string textToAppend)
        {
            if (RootTemplate != null)
            {
                RootTemplate.WriteLine(textToAppend);
            }
            else
            {
                base.WriteLine(textToAppend);
            }
        }
    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class CommaAndNewLine : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@",
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class CommaAndSpace : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@", "));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class NewLine : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultCheckConstraintTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    CONSTRAINT ["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"]
    CHECK ("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Expression));
            Write(this.ToStringHelper.ToStringWithCulture(@")"));
            if (!TemplateContext.IsLastIteration) {

            Write(this.ToStringHelper.ToStringWithCulture(@","));
            }

            if (TemplateContext.GetModelFromContextByType<ITableField>() == null) { WriteLine(""); }


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public ICheckConstraint Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultDefaultValueConstraintTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"ALTER TABLE ["));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.TableEntityName));
            Write(this.ToStringHelper.ToStringWithCulture(@"] ADD CONSTRAINT ["));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.Name));
            Write(this.ToStringHelper.ToStringWithCulture(@"] DEFAULT ("));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.DefaultValue));
            Write(this.ToStringHelper.ToStringWithCulture(@") FOR ["));
            Write(this.ToStringHelper.ToStringWithCulture(ViewModel.FieldName));
            Write(this.ToStringHelper.ToStringWithCulture(@"]
GO
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }

        protected SqlServerDatabaseSchemaGenerator_DefaultDefaultValueConstraintViewModel _viewModelField;

        /// <summary>
        /// Access the ViewModel parameter of the template.
        /// </summary>
        public SqlServerDatabaseSchemaGenerator_DefaultDefaultValueConstraintViewModel ViewModel
        {
            get
            {
                return this._viewModelField;
            }
            set
            {
                 this._viewModelField = value;
            }
        }

        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }
            ViewModel = GetViewModel(@"SqlServerDatabaseSchemaGenerator.DefaultDefaultValueConstraintViewModel") as SqlServerDatabaseSchemaGenerator_DefaultDefaultValueConstraintViewModel;

        }

        public IDefaultValueConstraint Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultFieldTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"	["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] "));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultFieldTypeTemplate", Model, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFieldTypeTemplateFromMetadata, });

            if(Model.IsIdentity) {

            Write(this.ToStringHelper.ToStringWithCulture(@" IDENTITY(1, 1)"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@" "));
            if (Model.IsRequired) {

            Write(this.ToStringHelper.ToStringWithCulture(@"NOT NULL"));
            } else {

            Write(this.ToStringHelper.ToStringWithCulture(@"NULL"));
            }

            if (Model.CheckConstraints.Any()) { WriteLine(""); }

            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultCheckConstraintTemplate", Model.CheckConstraints, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveCheckConstraintTemplateFromMetadata, });

            if (!TemplateContext.IsLastIteration) {

            Write(this.ToStringHelper.ToStringWithCulture(@","));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public ITableField Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultFieldTypeTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(Model.Type));
            if (Model.Type.IsDatabaseStringType())
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"("));
            if (Model.IsStringMaxLength == true)
	   {

            Write(this.ToStringHelper.ToStringWithCulture(@"MAX"));
            }
	   else
	   {

            Write(this.ToStringHelper.ToStringWithCulture(Model.StringLength.GetValueOrDefault(32)));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@")"));
            if (!string.IsNullOrEmpty(Model.StringCollation))
       {

            Write(this.ToStringHelper.ToStringWithCulture(@" COLLATE "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.StringCollation));
            }
   }
   else if (Model.NumericPrecision != null && Model.NumericScale != null)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"("));
            Write(this.ToStringHelper.ToStringWithCulture(Model.NumericPrecision.GetValueOrDefault(8)));
            Write(this.ToStringHelper.ToStringWithCulture(@","));
            Write(this.ToStringHelper.ToStringWithCulture(Model.NumericScale.GetValueOrDefault(0)));
            Write(this.ToStringHelper.ToStringWithCulture(@")"));
            }


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public ITableField Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultForeignKeyTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            var tableEntity = Model;

            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultForeignKeyConstraintTemplate", tableEntity.ForeignKeyConstraints, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public ITable Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultForeignKeyConstraintTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            var tableEntity = TemplateContext.GetModelFromContextByType<ITable>();
var schemaEntity = TemplateContext.GetModelFromContextByType<ISchema>();

            if (TemplateContext.GetContextByType<SqlServerDatabaseSchemaGenerator>().CreateCodeGenerationHeader)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"/****** Object:  ForeignKey ["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] ******/
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"ALTER TABLE ["));
            Write(this.ToStringHelper.ToStringWithCulture(schemaEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"].["));
            Write(this.ToStringHelper.ToStringWithCulture(tableEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"]  WITH CHECK ADD  CONSTRAINT ["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] FOREIGN KEY("));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultForeignKeyConstraintFieldTemplate", Model.LocalFields, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            Write(this.ToStringHelper.ToStringWithCulture(@")
REFERENCES ["));
            Write(this.ToStringHelper.ToStringWithCulture(schemaEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"].["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.ForeignTableName.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] ("));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultForeignKeyConstraintFieldTemplate", Model.ForeignFields, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            Write(this.ToStringHelper.ToStringWithCulture(@")
ON UPDATE "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.CascadeUpdate.ToSql()));
            Write(this.ToStringHelper.ToStringWithCulture(@"
ON DELETE "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.CascadeDelete.ToSql()));
            Write(this.ToStringHelper.ToStringWithCulture(@"
GO
ALTER TABLE ["));
            Write(this.ToStringHelper.ToStringWithCulture(schemaEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"].["));
            Write(this.ToStringHelper.ToStringWithCulture(tableEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] CHECK CONSTRAINT ["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"]
GO
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IForeignKeyConstraint Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultForeignKeyConstraintFieldTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"]"));
            if (!TemplateContext.IsLastIteration) {

            Write(this.ToStringHelper.ToStringWithCulture(@","));
            }


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IForeignKeyConstraintField Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultIndexTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            var tableEntity = TemplateContext.GetModelFromContextByType<ITable>();
var schemaEntity = TemplateContext.GetModelFromContextByType<ISchema>();

            Write(this.ToStringHelper.ToStringWithCulture(@"CREATE "));
            if (Model.Unique) {

            Write(this.ToStringHelper.ToStringWithCulture(@"UNIQUE "));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"NONCLUSTERED INDEX ["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] ON ["));
            Write(this.ToStringHelper.ToStringWithCulture(schemaEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"].["));
            Write(this.ToStringHelper.ToStringWithCulture(tableEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"]
(
"));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultIndexFieldTemplate", Model.Fields, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            Write(this.ToStringHelper.ToStringWithCulture(@") ON ["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.FileGroupName.WhenNullOrEmpty("PRIMARY").FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"]
GO
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IIndex Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultIndexFieldTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"	["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] "));
            if (Model.IsDescending) {

            Write(this.ToStringHelper.ToStringWithCulture(@"DESC"));
            } else {

            Write(this.ToStringHelper.ToStringWithCulture(@"ASC"));
            }

            if (!TemplateContext.IsLastIteration) {

            Write(this.ToStringHelper.ToStringWithCulture(@","));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IIndexField Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultPrimaryKeyConstraintTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@" CONSTRAINT ["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] PRIMARY KEY CLUSTERED
(
"));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultPrimaryKeyConstraintFieldTemplate", Model.Fields, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            Write(this.ToStringHelper.ToStringWithCulture(@") ON ["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.FileGroupName.WhenNullOrEmpty("PRIMARY").FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"]
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IPrimaryKeyConstraint Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultPrimaryKeyConstraintFieldTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"	["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] "));
            if (Model.IsDescending) {

            Write(this.ToStringHelper.ToStringWithCulture(@"DESC"));
            } else {

            Write(this.ToStringHelper.ToStringWithCulture(@"ASC"));
            }

            if (!TemplateContext.IsLastIteration) {

            Write(this.ToStringHelper.ToStringWithCulture(@","));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IPrimaryKeyConstraintField Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultSchemaTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultTableTemplate", Model.Tables, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultForeignKeyTemplate", Model.Tables, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultStoredProcedureTemplate", Model.StoredProcedures, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewTemplate", Model.Views, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public ISchema Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultStoredProcedureTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            var schemaEntity = TemplateContext.GetModelFromContextByType<ISchema>();

            if (TemplateContext.GetContextByType<SqlServerDatabaseSchemaGenerator>().CreateCodeGenerationHeader)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"/****** Object:  StoredProcedure ["));
            Write(this.ToStringHelper.ToStringWithCulture(schemaEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"].["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] ******/
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE ["));
            Write(this.ToStringHelper.ToStringWithCulture(schemaEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"].["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"]
"));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultStoredProcedureParameterTemplate", Model.Parameters, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            Write(this.ToStringHelper.ToStringWithCulture(@"AS
BEGIN"));
            WriteLine(""); if (Model.Statements.Any()) {

            RootTemplate.PushIndent("    ");

            
            RenderChildTemplate(null, Model.Statements, null, false, null, null, new CustomDelegates { });

            RootTemplate.PopIndent();

            }

            Write(this.ToStringHelper.ToStringWithCulture(@"END
GO
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IStoredProcedure Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultStoredProcedureParameterTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"	@"));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@" "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Type));
            if (!string.IsNullOrEmpty(Model.DefaultValue)) {

            Write(this.ToStringHelper.ToStringWithCulture(@" = "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.DefaultValue));
            }

            if (!TemplateContext.IsLastIteration) {

            Write(this.ToStringHelper.ToStringWithCulture(@","));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IStoredProcedureParameter Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultTableTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            var tableEntity = Model;
var schemaEntity = TemplateContext.GetModelFromContextByType<ISchema>();

            if (TemplateContext.GetContextByType<SqlServerDatabaseSchemaGenerator>().CreateCodeGenerationHeader)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"/****** Object:  Table ["));
            Write(this.ToStringHelper.ToStringWithCulture(schemaEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"].["));
            Write(this.ToStringHelper.ToStringWithCulture(tableEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] ******/
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE ["));
            Write(this.ToStringHelper.ToStringWithCulture(schemaEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"].["));
            Write(this.ToStringHelper.ToStringWithCulture(tableEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"](
"));
            
            RenderChildTemplate(null, GetFieldsAndPrimaryKeyConstraints(tableEntity), null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFieldAndPrimaryKeyFromMetadata, });

            Write(this.ToStringHelper.ToStringWithCulture(@") ON ["));
            Write(this.ToStringHelper.ToStringWithCulture(tableEntity.FileGroupName.WhenNullOrEmpty("PRIMARY").FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"]
GO
SET ANSI_PADDING OFF
GO
"));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultIndexTemplate", tableEntity.Indexes, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultDefaultValueConstraintTemplate", tableEntity.DefaultValueConstraints, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public ITable Model { get; set; }
        protected virtual IEnumerable<IMetadataContainer> GetFieldsAndPrimaryKeyConstraints(ITable table)
        {
            return table.Fields.Cast<IMetadataContainer>()
                .Concat(table.PrimaryKeyConstraints.Cast<IMetadataContainer>())
                .Concat(table.UniqueConstraints.Cast<IMetadataContainer>())
                .Concat(table.CheckConstraints.Cast<IMetadataContainer>());
        }


    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultUniqueConstraintTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@" CONSTRAINT ["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] UNIQUE NONCLUSTERED
(
"));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultUniqueConstraintFieldTemplate", Model.Fields, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            Write(this.ToStringHelper.ToStringWithCulture(@") ON ["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.FileGroupName.WhenNullOrEmpty("PRIMARY").FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"]
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IUniqueConstraint Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultUniqueConstraintFieldTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"	["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"]"));
            if (!TemplateContext.IsLastIteration) {

            Write(this.ToStringHelper.ToStringWithCulture(@","));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IUniqueConstraintField Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultViewConditionTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    "));
            if (!string.IsNullOrEmpty(Model.Combination)) {

            Write(this.ToStringHelper.ToStringWithCulture(Model.Combination));
            Write(this.ToStringHelper.ToStringWithCulture(@" "));
            }

            Write(this.ToStringHelper.ToStringWithCulture(Model.Expression));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IViewCondition Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultViewConditionsTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            if (Model.Conditions != null && Model.Conditions.Any())
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"WHERE
"));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewConditionTemplate", Model.Conditions.Select(c => c.AsFirstCondition()).Take(1).Concat(Model.Conditions.Skip(1)), null, false, @"NewLine", null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            WriteLine("");
   }


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IView Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultViewTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            var schemaEntity = TemplateContext.GetModelFromContextByType<ISchema>();

            if (TemplateContext.GetContextByType<SqlServerDatabaseSchemaGenerator>().CreateCodeGenerationHeader)
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"/****** Object:  View ["));
            Write(this.ToStringHelper.ToStringWithCulture(schemaEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"].["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"] ******/
"));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW ["));
            Write(this.ToStringHelper.ToStringWithCulture(schemaEntity.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"].["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Name.FormatAsDatabaseIdentifier()));
            Write(this.ToStringHelper.ToStringWithCulture(@"]
AS
"));
            if (!string.IsNullOrEmpty(Model.Definition))
   {

            Write(this.ToStringHelper.ToStringWithCulture(Model.Definition));
            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            }
   else
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"SELECT"));
            if (Model.Distinct) {

            Write(this.ToStringHelper.ToStringWithCulture(@" DISTINCT"));
            }

            if (Model.Top.HasValue) {

            Write(this.ToStringHelper.ToStringWithCulture(@" TOP "));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Top));
            }

            if (Model.Top.HasValue && Model.TopPercent) {

            Write(this.ToStringHelper.ToStringWithCulture(@" PERCENT"));
            }

            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewSelectFieldsTemplate", Model, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            Write(this.ToStringHelper.ToStringWithCulture(@"FROM
"));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewSourcesTemplate", Model, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewConditionsTemplate", Model, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewGroupByFieldsTemplate", Model, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewOrderByFieldsTemplate", Model, null, false, null, null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            }

            Write(this.ToStringHelper.ToStringWithCulture(@"GO
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IView Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultViewFieldTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    "));
            if (!string.IsNullOrEmpty(Model.Expression))
   {

            Write(this.ToStringHelper.ToStringWithCulture(Model.Expression));
            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            }
   else
   {
       if (!string.IsNullOrEmpty(Model.SourceSchemaName))
       {

            Write(this.ToStringHelper.ToStringWithCulture(@"["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.SourceSchemaName));
            Write(this.ToStringHelper.ToStringWithCulture(@"]."));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.SourceObjectName.WhenNullOrEmpty(Model.Name)));
            Write(this.ToStringHelper.ToStringWithCulture(@"]"));
            if (!string.IsNullOrEmpty(Model.Alias))
       {

            Write(this.ToStringHelper.ToStringWithCulture(@" AS ["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Alias));
            Write(this.ToStringHelper.ToStringWithCulture(@"]"));
            }
       var orderByField = Model as IViewOrderByField;
       if (orderByField != null)
       {
           if (orderByField.IsDescending)
           {
               Write(" DESC");
           }
           else
           {
               Write(" ASC");
           }
       }
   }


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IViewField Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultViewGroupByFieldsTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            if (Model.GroupByFields != null && Model.GroupByFields.Any())
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"GROUP BY
"));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewFieldTemplate", Model.GroupByFields, null, false, @"CommaAndNewLine", null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            WriteLine("");
   }


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IView Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultViewOrderByFieldsTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            if (Model.OrderByFields.Any())
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"ORDER BY
"));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewFieldTemplate", Model.OrderByFields, null, false, @"CommaAndNewLine", null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            WriteLine("");
   }


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IView Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultViewSelectFieldsTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"
"));
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewFieldTemplate", Model.SelectFields, null, false, @"CommaAndNewLine", null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IView Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultViewSourceTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            Write(this.ToStringHelper.ToStringWithCulture(@"    "));
            if (!string.IsNullOrEmpty(Model.SourceSchemaName))
   {

            Write(this.ToStringHelper.ToStringWithCulture(@"["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.SourceSchemaName));
            Write(this.ToStringHelper.ToStringWithCulture(@"]."));
            }

            Write(this.ToStringHelper.ToStringWithCulture(@"["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.SourceObjectName.WhenNullOrEmpty(Model.Name)));
            Write(this.ToStringHelper.ToStringWithCulture(@"]"));
            if(!string.IsNullOrEmpty(Model.Alias))
   {

            Write(this.ToStringHelper.ToStringWithCulture(@" AS ["));
            Write(this.ToStringHelper.ToStringWithCulture(Model.Alias));
            Write(this.ToStringHelper.ToStringWithCulture(@"]"));
            }


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IViewSource Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultViewSourcesTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            
            RenderChildTemplate(@"SqlServerDatabaseSchemaGenerator.DefaultViewSourceTemplate", Model.Sources, null, false, @"CommaAndNewLine", null, new CustomDelegates { ResolverDelegate = ResolveFromMetadata, });

            Write(this.ToStringHelper.ToStringWithCulture(@"
"));

            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public IView Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultLiteralSqlStatementTemplate : SqlServerDatabaseSchemaGeneratorBaseChild
    {
        public virtual void Render(global::System.Text.StringBuilder builder)
        {
            var backup = this.GenerationEnvironment;
            if (builder != null) this.GenerationEnvironment = builder;
            WriteLine(Model.Statement);


            if (builder != null) this.GenerationEnvironment = backup;
        }


        public virtual void Initialize(global::System.Action additionalActionDelegate = null)
        {
            this.Errors.Clear();
            this.GenerationEnvironment.Clear();
            if (Session == null)
            {
                Session = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            if (RootTemplate != null)
            {
                ChildTemplates = RootTemplate.ChildTemplates;
                ViewModels = RootTemplate.ViewModels;
            }
            else
            {
                ChildTemplates.Clear();
                ViewModels.Clear();
            }
            if (RootTemplate != null)
            {
                PlaceholderChildrenDictionary = RootTemplate.PlaceholderChildrenDictionary;
            }
            else
            {
                PlaceholderChildrenDictionary.Clear();
            }

        }

        public LiteralSqlStatement Model { get; set; }

    }
    [System.CodeDom.Compiler.GeneratedCodeAttribute(@"T4PlusCSharpCodeGenerator", @"1.0.0.0")]
    public class SqlServerDatabaseSchemaGenerator_DefaultDefaultValueConstraintViewModel
    {
        [global::System.ComponentModel.Browsable(false)]
        public IDefaultValueConstraint Model { get; set; }
        protected System.Boolean _createCodeGenerationHeaderField;

        /// <summary>
        /// Access the CreateCodeGenerationHeader parameter of the template.
        /// </summary>
        [global::System.ComponentModel.Browsable(false)]
        public System.Boolean CreateCodeGenerationHeader
        {
            get
            {
                return this._createCodeGenerationHeaderField;
            }
            set
            {
                 this._createCodeGenerationHeaderField = value;
            }
        }
        public string TableEntityName => TemplateContext.GetModelFromContextByType<ITable>().Name.FormatAsDatabaseIdentifier();
        public string Name => Model.Name.FormatAsDatabaseIdentifier();
        public string DefaultValue => Model.DefaultValue;
        public string FieldName => Model.FieldName.FormatAsDatabaseIdentifier();

        public TemplateInstanceContext TemplateContext { get; set; }

    }

}